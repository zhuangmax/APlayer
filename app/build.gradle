apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'bugly'

def properties = getProperties('../local.properties')

bugly {
    appId = "${getProperty(properties, 'BUGLY_APPID')}"
    appKey = "04ab39c8-86fc-4ed6-b28b-6fdfee6e19d9"
}

repositories {
    maven {
        url 'https://maven.google.com'
    }
}

android {
    compileSdkVersion 33
//    ndkVersion "23.0.7599858"

    defaultConfig {
        applicationId "remix.myplayer"
        minSdkVersion 19
        targetSdkVersion 33

        versionCode 16200
        versionName "1.6.2.0"

        flavorDimensions "default"
        vectorDrawables.useSupportLibrary = true

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        multiDexEnabled true

        // room
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        buildConfigField("String", "LASTFM_API_KEY", "\"${getProperty(properties, 'LASTFM_API_KEY')}\"")
        buildConfigField("String", "GOOGLE_PLAY_LICENSE_KEY", "\"${getProperty(properties, 'GOOGLE_PLAY_LICENSE_KEY')}\"")
        buildConfigField("String", "BUGLY_APPID", "\"${getProperty(properties, 'BUGLY_APPID')}\"")
        buildConfigField("String", "GITHUB_SECRET_KEY", "\"${getProperty(properties, 'GITHUB_SECRET_KEY')}\"")
    }

    signingConfigs {
        debug {
            storeFile file("Debug.jks")
            storePassword "123456"
            keyAlias "Debug"
            keyPassword "123456"
        }
        release {
            keyAlias getProperty(properties, 'keystore.keyAlias')
            keyPassword getProperty(properties, 'keystore.keyPassword')
            storeFile file(getProperty(properties, 'keystore.storeFile'))
            storePassword getProperty(properties, 'keystore.storePassword')

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false

            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'

            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
        release {
            //混淆代码
            signingConfig signingConfigs.release
            minifyEnabled true
            debuggable false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "APlayer_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_${new Date().format("yyyy-MM-dd HH-mm")}.apk"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    androidExtensions {
        experimental = true
    }

    productFlavors {
        google {}
        nongoogle {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    buildFeatures {
        viewBinding = true
    }

//    packagingOptions {
//        exclude 'META-INF/proguard/coroutines.pro'
//    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //support
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.media:media:1.3.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    //coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'

    //materialDialog
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    //rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.11'

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.2'

    //rxpermission
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

    //kotlin
    implementation 'org.jetbrains.anko:anko-common:0.10.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    //leakCanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    //bugly
    implementation 'com.tencent.bugly:crashreport:3.3.3'

    //gp
    implementation 'com.anjlab.android.iab.v3:library:2.0.3'

    //room
    implementation 'androidx.room:room-runtime:2.3.0'
    implementation 'androidx.room:room-ktx:2.3.0'
    kapt 'androidx.room:room-compiler:2.3.0' // use kapt for Kotlin
    implementation 'androidx.room:room-rxjava2:2.3.0'

    //rxlife
//    implementation 'com.trello.rxlifecycle3:rxlifecycle:3.0.0'
//    implementation 'com.trello.rxlifecycle3:rxlifecycle-android:3.0.0'
//    implementation 'com.trello.rxlifecycle3:rxlifecycle-components:3.0.0'
//    implementation 'com.trello.rxlifecycle3:rxlifecycle-kotlin:3.0.0'

    //timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    //other
    implementation 'com.facebook.rebound:rebound:0.3.8'
    implementation 'com.soundcloud.android:android-crop:1.0.1@aar'
    implementation 'com.github.promeg:tinypinyin:2.0.1'
    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation 'com.github.tony19:logback-android:2.0.0'

    //webdav
    implementation 'com.github.thegrizzlylabs:sardine-android:0.8'
}

android.sourceSets.all {
    java.srcDirs += "src/third-party/jaudiotagger-android/src"
}

def getProperties(String fileName) {
    final Properties properties = new Properties()
    def file = file(fileName)
    if (file.exists()) {
        file.withInputStream { stream -> properties.load(stream) }
    }
    return properties
}

def getProperty(Properties properties, String name) {
    return properties.getProperty(name) ?: "$name missing"
}


